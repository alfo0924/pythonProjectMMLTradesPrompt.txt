-------------------------------
-------------------------------


import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2019-01-01', end='2024-05-30')

# 將數據重新採樣為每週頻率
weekly_data = data.resample('W').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算移動平均線 (SMA) 作為趨勢指標
weekly_data['SMA'] = weekly_data['Close'].rolling(window=20).mean()

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1).dropna()
    up_chg = 0 * diff
    down_chg = 0 * diff

    up_chg[diff > 0] = diff[diff > 0]
    down_chg[diff < 0] = -diff[diff < 0]

    up_chg_avg = up_chg.rolling(time_window, min_periods=1).mean()
    down_chg_avg = down_chg.rolling(time_window, min_periods=1).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - 100 / (1 + rs)
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['SMA']) &
                             (weekly_data['RSI'] < 70) &
                             (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['SMA']) &
                              (weekly_data['RSI'] > 30) &
                              (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

weekly_data['Signal'] = weekly_data['Buy_Signal'] - weekly_data['Sell_Signal']
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * weekly_data['Close'].pct_change()

# 處理缺失值
weekly_data.dropna(inplace=True)

# 評估模型
accuracy = None  # 因為不再使用機器學習模型

# 計算累積收益
cumulative_return = (weekly_data['Strategy_Return'] + 1).cumprod()
final_cumulative_return = cumulative_return.iloc[-1]

# 生成交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Signal'] == -1].index

# 生成交互式圖表
fig = go.Figure(data=[go.Candlestick(x=weekly_data.index,
                                     open=weekly_data['Open'],
                                     high=weekly_data['High'],
                                     low=weekly_data['Low'],
                                     close=weekly_data['Close'],
                                     name='Candlestick'),
                      go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
                                 marker=dict(color='green', size=10, symbol='triangle-up')),
                      go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
                                 marker=dict(color='red', size=10, symbol='triangle-down'))])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")




-------------------------------
-------------------------------








import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2019-01-01', end='2024-05-30')

# 將數據重新採樣為每週頻率
weekly_data = data.resample('W').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算移動平均線 (SMA) 作為趨勢指標
weekly_data['SMA'] = weekly_data['Close'].rolling(window=20).mean()

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1).dropna()
    up_chg = 0 * diff
    down_chg = 0 * diff

    up_chg[diff > 0] = diff[diff > 0]
    down_chg[diff < 0] = -diff[diff < 0]

    up_chg_avg = up_chg.rolling(time_window, min_periods=1).mean()
    down_chg_avg = down_chg.rolling(time_window, min_periods=1).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - 100 / (1 + rs)
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['SMA']) &
                             (weekly_data['RSI'] < 70) &
                             (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['SMA']) &
                              (weekly_data['RSI'] > 30) &
                              (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

weekly_data['Signal'] = weekly_data['Buy_Signal'] - weekly_data['Sell_Signal']
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * weekly_data['Close'].pct_change()

# 處理缺失值
weekly_data.dropna(inplace=True)

# 評估模型
accuracy = None  # 因為不再使用機器學習模型

# 計算累積收益
cumulative_return = (weekly_data['Strategy_Return'] + 1).cumprod()
final_cumulative_return = cumulative_return.iloc[-1]

# 生成交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Signal'] == -1].index

# 生成交互式圖表
fig = go.Figure(data=[go.Candlestick(x=weekly_data.index,
                                     open=weekly_data['Open'],
                                     high=weekly_data['High'],
                                     low=weekly_data['Low'],
                                     close=weekly_data['Close'],
                                     name='Candlestick'),
                      go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
                                 marker=dict(color='green', size=10, symbol='triangle-up')),
                      go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
                                 marker=dict(color='red', size=10, symbol='triangle-down'))])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")  請幫我把交易頻率改每一小時一次 並設定起始資金為1000美金 並顯現最後的盈餘為多少美金







-------------------------------
-------------------------------






import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2019-01-01', end='2024-05-30', interval='1h')

# 將數據重新採樣為每小時頻率
hourly_data = data.resample('H').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算移動平均線 (SMA) 作為趨勢指標
hourly_data['SMA'] = hourly_data['Close'].rolling(window=20).mean()

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1).dropna()
    up_chg = 0 * diff
    down_chg = 0 * diff

    up_chg[diff > 0] = diff[diff > 0]
    down_chg[diff < 0] = -diff[diff < 0]

    up_chg_avg = up_chg.rolling(time_window, min_periods=1).mean()
    down_chg_avg = down_chg.rolling(time_window, min_periods=1).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - 100 / (1 + rs)
    return rsi

hourly_data['RSI'] = compute_RSI(hourly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
hourly_data['Resistance'] = hourly_data['Close'].rolling(window=50).max()

# 設定起始資金為1000美金
initial_capital = 1000

# 生成交易信號和策略收益率
hourly_data['Buy_Signal'] = ((hourly_data['Close'] > hourly_data['SMA']) &
                              (hourly_data['RSI'] < 70) &
                              (hourly_data['Close'] < hourly_data['Resistance'])).astype(int)

hourly_data['Sell_Signal'] = ((hourly_data['Close'] < hourly_data['SMA']) &
                               (hourly_data['RSI'] > 30) &
                               (hourly_data['Close'] > hourly_data['Resistance'])).astype(int)

hourly_data['Signal'] = hourly_data['Buy_Signal'] - hourly_data['Sell_Signal']
hourly_data['Strategy_Return'] = hourly_data['Signal'].shift(1) * hourly_data['Close'].pct_change()

# 處理缺失值
hourly_data.dropna(inplace=True)

# 計算累積收益
hourly_data['Cumulative_Return'] = (hourly_data['Strategy_Return'] + 1).cumprod()

# 計算最後的盈餘
final_profit = initial_capital * hourly_data['Cumulative_Return'].iloc[-1]

# 生成交易點位
buy_signals = hourly_data[hourly_data['Signal'] == 1].index
sell_signals = hourly_data[hourly_data['Signal'] == -1].index

# 生成交互式圖表
fig = go.Figure(data=[go.Candlestick(x=hourly_data.index,
                                     open=hourly_data['Open'],
                                     high=hourly_data['High'],
                                     low=hourly_data['Low'],
                                     close=hourly_data['Close'],
                                     name='Candlestick'),
                      go.Scatter(x=buy_signals, y=hourly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
                                 marker=dict(color='green', size=10, symbol='triangle-up')),
                      go.Scatter(x=sell_signals, y=hourly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
                                 marker=dict(color='red', size=10, symbol='triangle-down'))])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>最後的盈餘</h2>
    <p>{final_profit:.2f} 美金</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")






-------------------------------
-------------------------------

import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2017-05-01', end='2024-05-30')

# 將數據重新採樣為每週頻率
weekly_data = data.resample('W').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算移動平均線 (SMA) 作為趨勢指標
weekly_data['SMA'] = weekly_data['Close'].rolling(window=20).mean()

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1).dropna()
    up_chg = 0 * diff
    down_chg = 0 * diff

    up_chg[diff > 0] = diff[diff > 0]
    down_chg[diff < 0] = -diff[diff < 0]

    up_chg_avg = up_chg.rolling(time_window, min_periods=1).mean()
    down_chg_avg = down_chg.rolling(time_window, min_periods=1).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - 100 / (1 + rs)
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['SMA']) &
                             (weekly_data['RSI'] < 70) &
                             (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['SMA']) &
                              (weekly_data['RSI'] > 30) &
                              (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

weekly_data['Signal'] = weekly_data['Buy_Signal'] - weekly_data['Sell_Signal']
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * weekly_data['Close'].pct_change()

# 處理缺失值
weekly_data.dropna(inplace=True)

# 計算累積收益
cumulative_return = (weekly_data['Strategy_Return'] + 1).cumprod()
final_cumulative_return = cumulative_return.iloc[-1]

# 生成交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Signal'] == -1].index

# 生成交互式圖表
fig = go.Figure(data=[go.Candlestick(x=weekly_data.index,
                                     open=weekly_data['Open'],
                                     high=weekly_data['High'],
                                     low=weekly_data['Low'],
                                     close=weekly_data['Close'],
                                     name='Candlestick'),
                      go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
                                 marker=dict(color='green', size=10, symbol='triangle-up')),
                      go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
                                 marker=dict(color='red', size=10, symbol='triangle-down'))])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")
請增加Sell signal 到圖表中



-------------------------------
-------------------------------

import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2017-05-01', end='2024-05-30')

# 將數據重新採樣為每週頻率
weekly_data = data.resample('W').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算移動平均線 (SMA) 作為趨勢指標
weekly_data['SMA'] = weekly_data['Close'].rolling(window=20).mean()

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1).dropna()
    up_chg = 0 * diff
    down_chg = 0 * diff

    up_chg[diff > 0] = diff[diff > 0]
    down_chg[diff < 0] = -diff[diff < 0]

    up_chg_avg = up_chg.rolling(time_window, min_periods=1).mean()
    down_chg_avg = down_chg.rolling(time_window, min_periods=1).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - 100 / (1 + rs)
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['SMA']) &
                             (weekly_data['RSI'] < 70) &
                             (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['SMA']) &
                              (weekly_data['RSI'] > 30) &
                              (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

weekly_data['Signal'] = weekly_data['Buy_Signal'] - weekly_data['Sell_Signal']
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * weekly_data['Close'].pct_change()

# 處理缺失值
weekly_data.dropna(inplace=True)

# 計算累積收益
cumulative_return = (weekly_data['Strategy_Return'] + 1).cumprod()
final_cumulative_return = cumulative_return.iloc[-1]

# 生成交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Signal'] == -1].index

# 生成交互式圖表
fig = go.Figure(data=[
    go.Candlestick(x=weekly_data.index,
                   open=weekly_data['Open'],
                   high=weekly_data['High'],
                   low=weekly_data['Low'],
                   close=weekly_data['Close'],
                   name='Candlestick'),
    go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
               marker=dict(color='green', size=10, symbol='triangle-up')),
    go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
               marker=dict(color='red', size=10, symbol='triangle-down'))
])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")
 這個code 執行後 在瀏覽器還是沒有看到賣出訊號 請幫我debug

-------------------------------
-------------------------------







import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2017-05-01', end='2024-05-30')

# 將數據重新採樣為每週頻率
weekly_data = data.resample('W').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算移動平均線 (SMA) 作為趨勢指標
weekly_data['SMA'] = weekly_data['Close'].rolling(window=20).mean()

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1).dropna()
    up_chg = 0 * diff
    down_chg = 0 * diff

    up_chg[diff > 0] = diff[diff > 0]
    down_chg[diff < 0] = -diff[diff < 0]

    up_chg_avg = up_chg.rolling(time_window, min_periods=1).mean()
    down_chg_avg = down_chg.rolling(time_window, min_periods=1).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - 100 / (1 + rs)
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['SMA']) &
                             (weekly_data['RSI'] < 70) &
                             (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['SMA']) &
                              (weekly_data['RSI'] > 30) &
                              (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

weekly_data['Signal'] = weekly_data['Buy_Signal'] - weekly_data['Sell_Signal']
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * weekly_data['Close'].pct_change()

# 處理缺失值
weekly_data.dropna(inplace=True)

# 計算累積收益
cumulative_return = (weekly_data['Strategy_Return'] + 1).cumprod()
final_cumulative_return = cumulative_return.iloc[-1]

# 生成交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Signal'] == -1].index

# 生成交互式圖表
fig = go.Figure(data=[
    go.Candlestick(x=weekly_data.index,
                   open=weekly_data['Open'],
                   high=weekly_data['High'],
                   low=weekly_data['Low'],
                   close=weekly_data['Close'],
                   name='Candlestick'),
    go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
               marker=dict(color='green', size=10, symbol='triangle-up')),
    go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
               marker=dict(color='red', size=10, symbol='triangle-down'))
])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")
 那請幫增加計算機制:每筆買進 都會社停利停損 機制  ,停利1.5%以上 若高於1.5% 停損就會隨著價格提高做跟進 若價格原本6% 跌後 停損賣出 那個停損就是停利的5%位置





-------------------------------
-------------------------------


import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2017-05-01', end='2024-05-30')

# 將數據重新採樣為每週頻率
weekly_data = data.resample('W').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算移動平均線 (SMA) 作為趨勢指標
weekly_data['SMA'] = weekly_data['Close'].rolling(window=20).mean()

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1).dropna()
    up_chg = 0 * diff
    down_chg = 0 * diff

    up_chg[diff > 0] = diff[diff > 0]
    down_chg[diff < 0] = -diff[diff < 0]

    up_chg_avg = up_chg.rolling(time_window, min_periods=1).mean()
    down_chg_avg = down_chg.rolling(time_window, min_periods=1).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - 100 / (1 + rs)
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['SMA']) &
                             (weekly_data['RSI'] < 70) &
                             (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['SMA']) &
                              (weekly_data['RSI'] > 30) &
                              (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

weekly_data['Signal'] = weekly_data['Buy_Signal'] - weekly_data['Sell_Signal']
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * weekly_data['Close'].pct_change()

# 處理缺失值
weekly_data.dropna(inplace=True)

# 計算累積收益
cumulative_return = (weekly_data['Strategy_Return'] + 1).cumprod()
final_cumulative_return = cumulative_return.iloc[-1]

# 生成交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Signal'] == -1].index

# 生成交互式圖表
fig = go.Figure(data=[
    go.Candlestick(x=weekly_data.index,
                   open=weekly_data['Open'],
                   high=weekly_data['High'],
                   low=weekly_data['Low'],
                   close=weekly_data['Close'],
                   name='Candlestick'),
    go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
               marker=dict(color='green', size=10, symbol='triangle-up')),
    go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
               marker=dict(color='red', size=10, symbol='triangle-down'))
])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")
    # 設定停利和停損點位
take_profit_percentage = 1.5
stop_loss_percentage = 5.0

# 計算停利價位和停損價位
weekly_data['Take_Profit'] = weekly_data['Buy_Signal'] * (1 + take_profit_percentage / 100)
weekly_data['Stop_Loss'] = weekly_data['Buy_Signal'] * (1 - stop_loss_percentage / 100)

# 計算交易信號
weekly_data['Sell_Signal'] = np.where((weekly_data['Close'] >= weekly_data['Take_Profit']) |
                                       (weekly_data['Close'] <= weekly_data['Stop_Loss']), 1, 0)

# 處理連續出現的交易信號
weekly_data['Sell_Signal'] = weekly_data['Sell_Signal'] * weekly_data['Signal']

# 計算策略收益率
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * (weekly_data['Close'] / weekly_data['Close'].shift(1) - 1)

# 更新交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Sell_Signal'] == 1].index

# 生成交互式圖表
fig = go.Figure(data=[
    go.Candlestick(x=weekly_data.index,
                   open=weekly_data['Open'],
                   high=weekly_data['High'],
                   low=weekly_data['Low'],
                   close=weekly_data['Close'],
                   name='Candlestick'),
    go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
               marker=dict(color='green', size=10, symbol='triangle-up')),
    go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
               marker=dict(color='red', size=10, symbol='triangle-down'))
])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)
  請幫我合併這兩個程式碼 並寫出一個正確可執行的程式碼 


-------------------------------
-------------------------------



import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2017-01-01', end='2024-05-30')

# 將數據重新採樣為每週頻率
weekly_data = data.resample('W').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算策略收益率
weekly_data['Strategy_Return'] = weekly_data['Close'].pct_change()

# 處理缺失值
weekly_data.dropna(inplace=True)

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1)
    up_chg = diff.where(diff > 0, 0)
    down_chg = -diff.where(diff < 0, 0)

    up_chg_avg = up_chg.rolling(time_window).mean()
    down_chg_avg = down_chg.rolling(time_window).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - (100 / (1 + rs))
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['Open']) &
                             (weekly_data['RSI'] < 70) &
                             (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['Open']) &
                              (weekly_data['RSI'] > 30) &
                              (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

# Calculate trading signals
weekly_data['Signal'] = weekly_data['Buy_Signal'] - weekly_data['Sell_Signal']

# Calculate strategy return
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * (weekly_data['Close'] / weekly_data['Close'].shift(1) - 1)

# 設定停利和停損點位
take_profit_percentage = 1.5
stop_loss_percentage = 5.0

# 計算停利價位和停損價位
weekly_data['Take_Profit'] = weekly_data['Buy_Signal'] * (1 + take_profit_percentage / 100)
weekly_data['Stop_Loss'] = weekly_data['Buy_Signal'] * (1 - stop_loss_percentage / 100)

# 計算交易信號
weekly_data['Sell_Signal'] = np.where((weekly_data['Close'] >= weekly_data['Take_Profit']) |
                                      (weekly_data['Close'] <= weekly_data['Stop_Loss']), 1, 0)

# 處理連續出現的交易信號
weekly_data['Sell_Signal'] = weekly_data['Sell_Signal'] * weekly_data['Signal']

# 計算策略收益率
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * (weekly_data['Close'] / weekly_data['Close'].shift(1) - 1)

# 更新交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Sell_Signal'] == 1].index

# 生成交互式圖表
fig = go.Figure(data=[
    go.Candlestick(x=weekly_data.index,
                   open=weekly_data['Open'],
                   high=weekly_data['High'],
                   low=weekly_data['Low'],
                   close=weekly_data['Close'],
                   name='Candlestick'),
    go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
               marker=dict(color='green', size=10, symbol='triangle-up')),
    go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
               marker=dict(color='red', size=10, symbol='triangle-down'))
])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# Calculate cumulative return
final_cumulative_return = (1 + weekly_data['Strategy_Return']).cumprod()[-1] - 1

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")



 // sell signal fixed //


-------------------------------
-------------------------------




import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2014-01-01', end='2024-05-30', interval='1d')  # 將 interval 設為 '1wk'

# 將數據重新採樣為每周頻率
weekly_data = data.resample('1W').last()

# 計算策略收益率
weekly_data['Strategy_Return'] = weekly_data['Close'].pct_change()

# 處理缺失值
weekly_data.dropna(inplace=True)

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1)
    up_chg = diff.where(diff > 0, 0)
    down_chg = -diff.where(diff < 0, 0)

    up_chg_avg = up_chg.rolling(time_window).mean()
    down_chg_avg = down_chg.rolling(time_window).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - (100 / (1 + rs))
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['Open']) &
                                (weekly_data['RSI'] < 70) &
                                (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['Open']) &
                                 (weekly_data['RSI'] > 30) &
                                 (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

# Calculate trading signals
weekly_data['Signal'] = weekly_data['Buy_Signal'] - weekly_data['Sell_Signal']

# Calculate strategy return
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * (weekly_data['Close'] / weekly_data['Close'].shift(1) - 1)

# 設定停利和停損點位
take_profit_percentage = 1.5
stop_loss_percentage = 1.5

# 計算停利價位和停損價位
weekly_data['Take_Profit'] = weekly_data['Buy_Signal'] * (1 + take_profit_percentage / 100)
weekly_data['Stop_Loss'] = weekly_data['Buy_Signal'] * (1 - stop_loss_percentage / 100)

# 計算交易信號
weekly_data['Sell_Signal'] = np.where((weekly_data['Close'] >= weekly_data['Take_Profit']) |
                                         (weekly_data['Close'] <= weekly_data['Stop_Loss']), 1, 0)

# 處理連續出現的交易信號
weekly_data['Sell_Signal'] = weekly_data['Sell_Signal'] * weekly_data['Signal']

# 計算策略收益率
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * (weekly_data['Close'] / weekly_data['Close'].shift(1) - 1)

# 更新交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Sell_Signal'] == 1].index

# 生成交互式圖表
fig = go.Figure(data=[
    go.Candlestick(x=weekly_data.index,
                   open=weekly_data['Open'],
                   high=weekly_data['High'],
                   low=weekly_data['Low'],
                   close=weekly_data['Close'],
                   name='Candlestick'),
    go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
               marker=dict(color='green', size=10, symbol='triangle-up')),
    go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
               marker=dict(color='red', size=10, symbol='triangle-down'))
])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# Calculate cumulative return
final_cumulative_return = (1 + weekly_data['Strategy_Return']).cumprod()[-1] - 1

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")



請把停損停利機制改為: 停利3%  停損1% 





-------------------------------
-------------------------------
-------------------------------



import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2024-05-01', end='2024-05-31', interval='1d')

# 計算策略收益率
data['Strategy_Return'] = data['Close'].pct_change()

# 處理缺失值
data.dropna(inplace=True)

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1)
    up_chg = diff.where(diff > 0, 0)
    down_chg = -diff.where(diff < 0, 0)

    up_chg_avg = up_chg.rolling(time_window).mean()
    down_chg_avg = down_chg.rolling(time_window).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - (100 / (1 + rs))
    return rsi

data['RSI'] = compute_RSI(data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
data['Resistance'] = data['Close'].rolling(window=50).max()

# 生成交互式圖表
fig = go.Figure(data=[
    go.Candlestick(x=data.index,
                   open=data['Open'],
                   high=data['High'],
                   low=data['Low'],
                   close=data['Close'],
                   name='Candlestick')
])
# 生成交易信号
data['SMA_50'] = data['Close'].rolling(window=50).mean()  # 计算50日简单移动平均线
data['SMA_200'] = data['Close'].rolling(window=200).mean()  # 计算200日简单移动平均线

# 当50日SMA上穿200日SMA时产生买入信号，当50日SMA下穿200日SMA时产生卖出信号
data['Signal'] = np.where(data['SMA_50'] > data['SMA_200'], 1, -1)


# 加入交易信號
buy_signals = data[data['Signal'] == 1].index
sell_signals = data[data['Signal'] == -1].index

fig.add_trace(go.Scatter(x=buy_signals, y=data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
                         marker=dict(color='green', size=10, symbol='triangle-up')))
fig.add_trace(go.Scatter(x=sell_signals, y=data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
                         marker=dict(color='red', size=10, symbol='triangle-down')))

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# Calculate cumulative return
final_cumulative_return = (1 + data['Strategy_Return']).cumprod()[-1] - 1

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")
  請幫我改成這個交易策略 : 當黃金價格符合以下條件時，會產生買入信號：

收盤價高於開盤價。
RSI低於70（表示市場可能超賣）。
收盤價低於壓力水平（此處假設壓力水平為50日內最高價）。
而當黃金價格符合以下條件時，會產生賣出信號：

收盤價低於開盤價。
RSI高於30（表示市場可能超買）。
收盤價高於壓力水平。
此外，策略還包括了停利和停損機制，以及相應的交易信號生成。






-------------------------------
-------------------------------
-------------------------------


import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2019-01-01', end='2024-05-30')

# 將數據重新採樣為每週頻率
weekly_data = data.resample('W').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算移動平均線 (SMA) 作為趨勢指標
weekly_data['SMA'] = weekly_data['Close'].rolling(window=20).mean()

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1).dropna()
    up_chg = 0 * diff
    down_chg = 0 * diff

    up_chg[diff > 0] = diff[diff > 0]
    down_chg[diff < 0] = -diff[diff < 0]

    up_chg_avg = up_chg.rolling(time_window, min_periods=1).mean()
    down_chg_avg = down_chg.rolling(time_window, min_periods=1).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - 100 / (1 + rs)
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['SMA']) &
                             (weekly_data['RSI'] < 70) &
                             (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['SMA']) &
                              (weekly_data['RSI'] > 30) &
                              (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

weekly_data['Signal'] = weekly_data['Buy_Signal'] - weekly_data['Sell_Signal']

# 計算每次賣出後的獲利或虧損
weekly_data['Sell_Profit'] = weekly_data['Sell_Signal'].shift(1) * (weekly_data['Close'] - weekly_data['Close'].shift(1))

# 將賣出後的獲利或虧損累加到最後的累積收益中
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * weekly_data['Close'].pct_change() + weekly_data['Sell_Profit']

# 處理缺失值
weekly_data.dropna(inplace=True)

# 評估模型
accuracy = None  # 因為不再使用機器學習模型

# 計算累積收益
cumulative_return = (weekly_data['Strategy_Return'] + 1).cumprod()
final_cumulative_return = cumulative_return.iloc[-1]

# 生成交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Signal'] == -1].index

# 生成交互式圖表
fig = go.Figure(data=[go.Candlestick(x=weekly_data.index,
                                     open=weekly_data['Open'],
                                     high=weekly_data['High'],
                                     low=weekly_data['Low'],
                                     close=weekly_data['Close'],
                                     name='Candlestick'),
                      go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
                                 marker=dict(color='green', size=10, symbol='triangle-up')),
                      go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
                                 marker=dict(color='red', size=10, symbol='triangle-down'))])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")



  想在圖表看到賣出的訊號 賣出代表結束買進時的倉位 ,這個程式只做多交易 不做空







-------------------------------
-------------------------------
-------------------------------







import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2019-01-01', end='2024-05-30')

# 將數據重新採樣為每週頻率
weekly_data = data.resample('W').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算移動平均線 (SMA) 作為趨勢指標
weekly_data['SMA'] = weekly_data['Close'].rolling(window=20).mean()

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1).dropna()
    up_chg = 0 * diff
    down_chg = 0 * diff

    up_chg[diff > 0] = diff[diff > 0]
    down_chg[diff < 0] = -diff[diff < 0]

    up_chg_avg = up_chg.rolling(time_window, min_periods=1).mean()
    down_chg_avg = down_chg.rolling(time_window, min_periods=1).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - 100 / (1 + rs)
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['SMA']) &
                             (weekly_data['RSI'] < 70) &
                             (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['SMA']) &
                              (weekly_data['RSI'] > 30) &
                              (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

weekly_data['Signal'] = weekly_data['Buy_Signal'] - weekly_data['Sell_Signal']

# 計算每次賣出後的獲利或虧損
weekly_data['Sell_Profit'] = weekly_data['Sell_Signal'].shift(1) * (weekly_data['Close'] - weekly_data['Close'].shift(1))

# 將賣出後的獲利或虧損累加到最後的累積收益中
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * weekly_data['Close'].pct_change() + weekly_data['Sell_Profit']

# 處理缺失值
weekly_data.dropna(inplace=True)

# 評估模型
accuracy = None  # 因為不再使用機器學習模型

# 計算累積收益
cumulative_return = (weekly_data['Strategy_Return'] + 1).cumprod()
final_cumulative_return = cumulative_return.iloc[-1]

# 生成交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Signal'] == -1].index

# 生成交互式圖表
fig = go.Figure(data=[go.Candlestick(x=weekly_data.index,
                                     open=weekly_data['Open'],
                                     high=weekly_data['High'],
                                     low=weekly_data['Low'],
                                     close=weekly_data['Close'],
                                     name='Candlestick'),
                      go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
                                 marker=dict(color='green', size=10, symbol='triangle-up')),
                      go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
                                 marker=dict(color='red', size=10, symbol='triangle-down'))])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")
 看不到賣出的訊號   想在圖表看到賣出的訊號 賣出代表結束買進時的倉位 ,這個程式只做多交易 不做空   並把做多賣出時的盈虧 累積到 累積收益










-------------------------------
-------------------------------
-------------------------------









import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2019-01-01', end='2024-05-30')

# 將數據重新採樣為每週頻率
weekly_data = data.resample('W').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算移動平均線 (SMA) 作為趨勢指標
weekly_data['SMA'] = weekly_data['Close'].rolling(window=20).mean()

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1).dropna()
    up_chg = 0 * diff
    down_chg = 0 * diff

    up_chg[diff > 0] = diff[diff > 0]
    down_chg[diff < 0] = -diff[diff < 0]

    up_chg_avg = up_chg.rolling(time_window, min_periods=1).mean()
    down_chg_avg = down_chg.rolling(time_window, min_periods=1).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - 100 / (1 + rs)
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['SMA']) &
                             (weekly_data['RSI'] < 70) &
                             (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['SMA']) &
                              (weekly_data['RSI'] > 30) &
                              (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

weekly_data['Signal'] = weekly_data['Buy_Signal'] - weekly_data['Sell_Signal']

# 計算每次賣出後的獲利或虧損
weekly_data['Sell_Profit'] = weekly_data['Sell_Signal'].shift(1) * (weekly_data['Close'] - weekly_data['Close'].shift(1))

# 將賣出後的獲利或虧損累加到最後的累積收益中
weekly_data['Strategy_Return'] = weekly_data['Signal'].shift(1) * weekly_data['Close'].pct_change() + weekly_data['Sell_Profit']

# 處理缺失值
weekly_data.dropna(inplace=True)

# 評估模型
accuracy = None  # 因為不再使用機器學習模型

# 計算累積收益
cumulative_return = (weekly_data['Strategy_Return'] + 1).cumprod()
final_cumulative_return = cumulative_return.iloc[-1]

# 生成交易點位
buy_signals = weekly_data[weekly_data['Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Signal'] == -1].index

# 生成交互式圖表
fig = go.Figure(data=[go.Candlestick(x=weekly_data.index,
                                     open=weekly_data['Open'],
                                     high=weekly_data['High'],
                                     low=weekly_data['Low'],
                                     close=weekly_data['Close'],
                                     name='Candlestick'),
                      go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
                                 marker=dict(color='green', size=10, symbol='triangle-up')),
                      go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
                                 marker=dict(color='red', size=10, symbol='triangle-down'))])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")
 請幫我更新交易策略:  交易頻率改 每天一次 買進賣出 買進賣出 後 累積收益賺錢或虧錢 做累加  設置120均線60均線 20均線若價錢在120均線下不買進 若在120均線上在60均線上 做買進 但是如果乖離率離 120均線 60均線 20均線 過大不做買進  若買進後 價錢跌破20均線 做賣出多單後不另外做空  本策略只做多 不做空  請幫我重寫code










-------------------------------
-------------------------------
-------------------------------



import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2019-01-01', end='2024-05-30')

# 將數據重新採樣為每週頻率
weekly_data = data.resample('W').agg({'Open': 'first', 'High': 'max', 'Low': 'min', 'Close': 'last', 'Volume': 'sum'})

# 計算移動平均線 (SMA) 作為趨勢指標
weekly_data['SMA'] = weekly_data['Close'].rolling(window=20).mean()

# 計算RSI
def compute_RSI(data, time_window):
    diff = data.diff(1).dropna()
    up_chg = 0 * diff
    down_chg = 0 * diff

    up_chg[diff > 0] = diff[diff > 0]
    down_chg[diff < 0] = -diff[diff < 0]

    up_chg_avg = up_chg.rolling(time_window, min_periods=1).mean()
    down_chg_avg = down_chg.rolling(time_window, min_periods=1).mean()

    rs = up_chg_avg / down_chg_avg
    rsi = 100 - 100 / (1 + rs)
    return rsi

weekly_data['RSI'] = compute_RSI(weekly_data['Close'], 14)

# 設定壓力水平（假設為前期高點作為壓力水平）
weekly_data['Resistance'] = weekly_data['Close'].rolling(window=50).max()

# 生成交易信號和策略收益率
weekly_data['Buy_Signal'] = ((weekly_data['Close'] > weekly_data['SMA']) &
                             (weekly_data['RSI'] < 70) &
                             (weekly_data['Close'] < weekly_data['Resistance'])).astype(int)

weekly_data['Sell_Signal'] = ((weekly_data['Close'] < weekly_data['SMA']) &
                              (weekly_data['RSI'] > 30) &
                              (weekly_data['Close'] > weekly_data['Resistance'])).astype(int)

# 停利停損
take_profit_pct = 0.015  # 1.5%
stop_loss_pct = 0.01  # 1%

# 初始化持倉和買入價
weekly_data['Position'] = 0
weekly_data['Buy_Price'] = 0.0

for i in range(1, len(weekly_data)):
    if weekly_data['Buy_Signal'].iloc[i] == 1 and weekly_data['Position'].iloc[i-1] == 0:
        weekly_data.at[weekly_data.index[i], 'Position'] = 1
        weekly_data.at[weekly_data.index[i], 'Buy_Price'] = weekly_data['Close'].iloc[i]
    elif weekly_data['Position'].iloc[i-1] == 1:
        buy_price = weekly_data['Buy_Price'].iloc[i-1]
        if (weekly_data['Close'].iloc[i] >= buy_price * (1 + take_profit_pct)) or (weekly_data['Close'].iloc[i] <= buy_price * (1 - stop_loss_pct)):
            weekly_data.at[weekly_data.index[i], 'Position'] = 0
        else:
            weekly_data.at[weekly_data.index[i], 'Position'] = 1
            weekly_data.at[weekly_data.index[i], 'Buy_Price'] = buy_price

weekly_data['Position'] = weekly_data['Position'].shift(1).fillna(0)  # 將信號移動以反映下個周期的交易
weekly_data['Strategy_Return'] = weekly_data['Position'] * weekly_data['Close'].pct_change()

# 累積收益計算
cumulative_return = (weekly_data['Strategy_Return'] + 1).cumprod()
final_cumulative_return = cumulative_return.iloc[-1]

# 生成交易點位
buy_signals = weekly_data[weekly_data['Buy_Signal'] == 1].index
sell_signals = weekly_data[weekly_data['Sell_Signal'] == 1].index

# 生成交互式圖表
fig = go.Figure(data=[go.Candlestick(x=weekly_data.index,
                                     open=weekly_data['Open'],
                                     high=weekly_data['High'],
                                     low=weekly_data['Low'],
                                     close=weekly_data['Close'],
                                     name='Candlestick'),
                      go.Scatter(x=buy_signals, y=weekly_data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
                                 marker=dict(color='green', size=10, symbol='triangle-up')),
                      go.Scatter(x=sell_signals, y=weekly_data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
                                 marker=dict(color='red', size=10, symbol='triangle-down'))])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")
  請幫我改進這套交易策略 : 設定120均線 60均線 20均線 增加kd macd 交易量 指標做分析 ,若價錢低於120均線且kd  macd  也低於20 交易量爆大量 做買進   若kd黃金交叉低檔背離 macd 低檔背離做買進  若價錢跌破20 均線 60均線 型態轉空頭 做賣出   請幫改進根據我提供的程式碼寫出一個完整的code 






  

-------------------------------
-------------------------------
-------------------------------









import yfinance as yf
import pandas as pd
import numpy as np
import webbrowser
import plotly.graph_objects as go

# 下載黃金歷史數據
data = yf.download('GC=F', start='2019-01-01', end='2024-05-30')

# 計算移動平均線 (SMA) 作為趨勢指標
data['SMA_20'] = data['Close'].rolling(window=20).mean()
data['SMA_60'] = data['Close'].rolling(window=60).mean()
data['SMA_120'] = data['Close'].rolling(window=120).mean()

# 計算KD指標
def compute_KD(data, window=9):
    high = data['High']
    low = data['Low']
    close = data['Close']
    
    low_min = low.rolling(window=window, min_periods=1).min()
    high_max = high.rolling(window=window, min_periods=1).max()
    
    rsv = (close - low_min) / (high_max - low_min) * 100
    
    k_series = rsv.ewm(com=2).mean()
    d_series = k_series.ewm(com=2).mean()
    
    return k_series, d_series

data['K'], data['D'] = compute_KD(data)

# 計算MACD指標
def compute_MACD(data, short_window=12, long_window=26):
    short_ema = data['Close'].ewm(span=short_window, min_periods=1, adjust=False).mean()
    long_ema = data['Close'].ewm(span=long_window, min_periods=1, adjust=False).mean()
    
    macd = short_ema - long_ema
    signal_line = macd.ewm(span=9, min_periods=1, adjust=False).mean()
    
    return macd, signal_line

data['MACD'], data['Signal_Line'] = compute_MACD(data)

# 計算交易量
data['Volume_MA'] = data['Volume'].rolling(window=20).mean()

# 生成交易信號
data['Buy_Signal'] = ((data['Close'] < data['SMA_120']) &
                      (data['K'] < 20) &
                      (data['MACD'] < data['Signal_Line']) &
                      (data['Volume'] > data['Volume_MA'])).astype(int)

data['Sell_Signal'] = ((data['K'] > data['D']) &
                       (data['MACD'] > data['Signal_Line']) &
                       ((data['Close'] < data['SMA_20']) | (data['Close'] < data['SMA_60']))).astype(int)

# 初始化持倉
data['Position'] = 0

# 設定停利停損
take_profit_pct = 0.015  # 1.5%
stop_loss_pct = 0.01  # 1%

for i in range(1, len(data)):
    if data['Buy_Signal'].iloc[i] == 1 and data['Position'].iloc[i-1] == 0:
        data.at[data.index[i], 'Position'] = 1
    elif data['Sell_Signal'].iloc[i] == 1 and data['Position'].iloc[i-1] == 1:
        data.at[data.index[i], 'Position'] = 0
    else:
        data.at[data.index[i], 'Position'] = data['Position'].iloc[i-1]

# 計算策略收益率
data['Strategy_Return'] = data['Position'] * data['Close'].pct_change()

# 累積收益計算
cumulative_return = (data['Strategy_Return'] + 1).cumprod()
final_cumulative_return = cumulative_return.iloc[-1]

# 生成交易點位
buy_signals = data[data['Buy_Signal'] == 1].index
sell_signals = data[data['Sell_Signal'] == 1].index

# 生成交互式圖表
fig = go.Figure(data=[go.Candlestick(x=data.index,
                                     open=data['Open'],
                                     high=data['High'],
                                     low=data['Low'],
                                     close=data['Close'],
                                     name='Candlestick'),
                      go.Scatter(x=buy_signals, y=data.loc[buy_signals]['Low'], mode='markers', name='Buy Signal',
                                 marker=dict(color='green', size=10, symbol='triangle-up')),
                      go.Scatter(x=sell_signals, y=data.loc[sell_signals]['High'], mode='markers', name='Sell Signal',
                                 marker=dict(color='red', size=10, symbol='triangle-down'))])

fig.update_layout(title='Gold Trading Strategy', xaxis_title='Date', yaxis_title='Price', showlegend=True)

# 生成HTML內容
html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>交易結果</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <h1>交易結果</h1>
    <h2>累積收益</h2>
    <p>{final_cumulative_return:.2f}</p>
    <h2>交易點位</h2>
    <ul>
        <li>買進點位: {buy_signals[:3].to_list()}</li>
        <li>賣出點位: {sell_signals[:3].to_list()}</li>
    </ul>
    <h2>交易圖表</h2>
    <div id="plotly-chart"></div>
    <script>
        var figure = {fig.to_json()};
        Plotly.newPlot('plotly-chart', figure.data, figure.layout);
    </script>
</body>
</html>
"""

# 寫入HTML文件
with open("trading_result.html", "w", encoding="utf-8") as file:
    file.write(html_content)

# 打開瀏覽器
webbrowser.open("trading_result.html")










**
-------------------------------
-------------------------------
-------------------------------




